#+TITLE: Doom Emacs Configuration

[[https://github.com/doomemacs/doomemacs/blob/master/docs/getting_started.org][doom - getting started]]

* Next emacs configuration todo's
** Add Tidal

- [ ] install tidal-2.0

[[https://github.com/tidalcycles/Tidal][GitHub - tidalcycles/Tidal: Pattern language]]

- [ ] get together installation notes

** turn- on haskell-snippets
** turn off lsp-mode
** audit non-standard binds
** audit configuration examples
** transfer old haskell settings
** remove company mode from ghci comint
* Non-standard binds

| key         | command                      |
|-------------+------------------------------|
| ~v~ ~V~         | expands and contracts region |
| ~SPC s f~     | consult-find                 |
| ~SPC s y~     | consult-yank-from-kill-ring  |
| ~M-SPC~       | cycle-spacing                |
| ~M-j~         | avy-goto-char-timer          |
| ~SPC m l c~   | org-clip-link                |
| ~gk~ ~gj~       | up and down an org header    |
| ~SPC m z~     | yank to block commands       |
| ~SPC m l p~   | org-hugo-export-wim-to-md    |
| ~SPC m n~     | flycheck-next-error          |
| ~SPC m p~     | flycheck-previous-error      |
| ~M-w~         | easy-kill                    |
| ~C-x C-d~     | consult-dir                  |
| ~C-x C-j~     | consult-dir-jump-file        |
| ~M-up~ ~M-down~ | Move line up/down            |
| ~C-;~         | embark-act                   |
| ~SPC t m~     | style/max-frame              |
| ~SPC t d~     | style/default-frame          |

* Configuration Examples

Most of my doom config, and much of my work flow has been put together from reading and stealing from other configs.

A useful technique is to do an advanced github search of these repos, together with the main doom-emacs repository. An example:
[[https://github.com/search?q=org-modern+repo%3Adoomemacs%2Fdoomemacs+repo%3Ahlissner%2F.doom.d+repo%3Afloscr%2Femacs.d+repo%3Adangirsh%2F.doom.d%2F+repo%3ALemonBreezes%2F.doom.d+repo%3Azzamboni%2Fdot-emacs+repo%3Ajethrokuan%2Fdots+repo%3Asachac%2F.emacs.d%2F+repo%3Adaviwil%2Fdotfiles+repo%3Afrap%2Femacs-literate+repo%3AMatthewZMD%2F.emacs.d+repo%3Akarthink%2F.emacs.d&type=Code][Example search on org-modern]]

** doom'ish

[[https://github.com/LemonBreezes/cae-emacs][GitHub - LemonBreezes/cae-emacs: My new personal Doom Emacs configuration]]

[[https://github.com/floscr/emacs.d][GitHub - floscr/emacs.d: My emacs config]]

[[https://github.com/dangirsh/.doom.d][GitHub - dangirsh/.doom.d: A literate Doom Emacs config]]

[[https://github.com/hlissner/doom-emacs-private][GitHub - hlissner/doom-emacs-private: My private module for Doom Emacs]]

[[https://github.com/jethrokuan/dots/blob/master/.doom.d/config.el][dots/config.el at master · jethrokuan/dots · GitHub]]

[[https://github.com/tecosaur/emacs-config/][GitHub - tecosaur/emacs-config: My configuration for Doom Emacs]]

** from-scratch'ish

[[https://zzamboni.org/post/my-emacs-configuration-with-commentary/][zzamboni.org | My Emacs Configuration, With Commentary]]

[[https://sachachua.com/dotemacs/][Sacha Chua's Emacs configuration]]

[[https://github.com/daviwil/dotfiles][GitHub - daviwil/dotfiles: The path to GNUrvana]]

[[https://github.com/MatthewZMD/.emacs.d][GitHub - MatthewZMD/.emacs.d: M-EMACS, a full-featured GNU Emacs configuratio...]]

[[https://github.com/karthink/.emacs.d][GitHub - karthink/.emacs.d: My personal emacs settings]]

https://protesilaos.com/emacs/dotemacs

** haskell'ish

[[https://gitlab.com/magus/mes][Magnus Therning / My Emacs Setup · GitLab]]

[[https://gitlab.com/jjba-projects/dotfiles/-/blob/master/void/emacs/my-lisp/init-dev.org?ref_type=heads][void/emacs/my-lisp/init-dev.org · master · JJBA Projects / Dotfiles · GitLab]]

* Front Matter

As per default doom config.el.

[[https://elpa.gnu.org/packages/doc/modus-themes.html#Fringes][Modus themes for GNU Emacs]]
[[https://protesilaos.com/emacs/modus-themes][Modus Themes (Modus Operandi and Modus Vivendi) | Protesilaos Stavrou]]

#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; other configuration examples
;;

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Tony Day"
      user-mail-address "tonyday567@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;;(setq doom-font (font-spec :family "Iosevka ss02" :size 14 :weight 'light)
;;      doom-variable-pitch-font (font-spec :family "Iosevka etoile" :size 14))
(setq doom-font (font-spec :family "Victor Mono")
      doom-variable-pitch-font (font-spec :family "Iosevka Aile"))

;;(setq doom-font (font-spec :family "Iosevka")
;;      doom-variable-pitch-font (font-spec :family "Iosevka Aile"))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-Iosvkem)
(setq doom-theme 'modus-operandi)
;; (doom-themes-org-config)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type nil)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

#+end_src

* Doom

Global and standard doom library tweaks.

** globals

#+begin_src elisp
(setq evil-split-window-below t
      evil-vsplit-window-right t
      confirm-kill-emacs nil
      confirm-kill-processes nil
      shift-select-mode t
      window-combination-resize t
      case-fold-search t
      auto-save-default t)

;; setq-default sets variables that are usually local to buffers
(setq-default truncate-lines nil
              indent-tabs-mode nil)

(map! ;; removes from kill ring
      [remap backward-kill-word] #'doom/delete-backward-word
      ;; replaces just-one-space
      "M-SPC" #'cycle-spacing
      ;"M-g o" #'consult-outline
      [remap ibuffer] #'ibuffer-jump)

#+end_src

*** doom-modeline

#+begin_src elisp
(setq doom-modeline-lsp-icon nil)
(setq doom-modeline-buffer-encoding nil)
(setq doom-modeline-buffer-state-icon nil)
(setq doom-modeline-vcs-max-length 8)
(setq doom-modeline-lsp nil)
(setq doom-modeline-modal nil)
#+end_src


** default frame

#+begin_src elisp
(defun style/left-frame ()
  (interactive)
  (cond
   ((string-equal system-type "windows-nt") ; Microsoft Windows
    (progn
      (set-frame-parameter (selected-frame) 'fullscreen nil)
      (set-frame-parameter (selected-frame) 'vertical-scroll-bars nil)
      (set-frame-parameter (selected-frame) 'horizontal-scroll-bars nil)
      (set-frame-parameter (selected-frame) 'top 10)
      (set-frame-parameter (selected-frame) 'left 6)
      (set-frame-parameter (selected-frame) 'height 40)
      (set-frame-parameter (selected-frame) 'width 120)))
   ((string-equal system-type "darwin") ; Mac OS X
    (progn
      (set-frame-parameter (selected-frame) 'fullscreen nil)
      (set-frame-parameter (selected-frame) 'vertical-scroll-bars nil)
      (set-frame-parameter (selected-frame) 'horizontal-scroll-bars nil)
      (set-frame-parameter (selected-frame) 'top 23)
      (set-frame-parameter (selected-frame) 'left 0)
      (set-frame-parameter (selected-frame) 'height 44)
      (set-frame-parameter (selected-frame) 'width 100)
      (message "default-frame set")))
   ((string-equal system-type "gnu/linux") ; linux
    (progn
      (message "Linux")))))

(add-to-list 'initial-frame-alist '(top . 23))
(add-to-list 'initial-frame-alist '(left . 0))
(add-to-list 'initial-frame-alist '(height . 44))
(add-to-list 'initial-frame-alist '(width . 100))

(defun style/max-frame ()
  (interactive)
  (if t
      (progn
        (set-frame-parameter (selected-frame) 'fullscreen 'fullboth)
        (set-frame-parameter (selected-frame) 'vertical-scroll-bars nil)
        (set-frame-parameter (selected-frame) 'horizontal-scroll-bars nil))
    (set-frame-parameter (selected-frame) 'top 26)
    (set-frame-parameter (selected-frame) 'left 2)
    (set-frame-parameter (selected-frame) 'width
                         (floor (/ (float (x-display-pixel-width)) 9.15)))
    (if (= 1050 (x-display-pixel-height))
        (set-frame-parameter (selected-frame) 'height
                             (if (>= emacs-major-version 24)
                                 66
                               55))
      (set-frame-parameter (selected-frame) 'height
                           (if (>= emacs-major-version 24)
                               75
                             64)))))

(style/left-frame)  ;; Focus new window after splitting
(map!
   :leader
   :nvm "tm" #'style/max-frame
   :nvm "td" #'style/left-frame)
#+end_src

** evil

#+begin_src elisp
(setq evil-kill-on-visual-paste nil
      evil-want-C-u-scroll nil
      evil-want-integration t
      evil-want-keybinding nil
      evil-move-cursor-back nil
      evil-move-beyond-eol t
      evil-highlight-closing-paren-at-point-states nil)
#+end_src

#+begin_src elisp
(defun evil-forward-after-end (thing &optional count)
  "Move forward to end of THING.
The motion is repeated COUNT times."
  (setq count (or count 1))
  (cond
   ((> count 0)
    (forward-thing thing count))
   (t
    (unless (bobp) (forward-char -1))
    (let ((bnd (bounds-of-thing-at-point thing))
          rest)
      (when bnd
        (cond
         ((< (point) (cdr bnd)) (goto-char (car bnd)))
         ((= (point) (cdr bnd)) (cl-incf count))))
      (condition-case nil
          (when (zerop
                 (setq rest
                       (forward-thing thing count)))
            (end-of-thing thing))
        (error))
      rest))))

(evil-define-motion evil-forward-after-word-end (count &optional bigword)
  "Move the cursor to the end of the COUNT-th next word.
If BIGWORD is non-nil, move by WORDS."
  :type inclusive
  (let ((thing (if bigword 'evil-WORD 'evil-word))
        (count (or count 1)))
    (evil-signal-at-bob-or-eob count)
    (evil-forward-after-end thing count)))

(evil-define-motion evil-forward-after-WORD-end (count)
  "Move the cursor to the end of the COUNT-th next WORD."
  :type inclusive
  (evil-forward-after-word-end count t))

(map!
 :m "e" 'evil-forward-after-word-end
 :m "E" 'evil-forward-after-WORD-end
 :n "C-r"  nil
 :n "U" 'evil-undo)
#+end_src

** packages
*** vertico

#+begin_src elisp
(setq vertico-sort-function #'vertico-sort-history-alpha)
#+end_src

*** isearch

#+begin_src elisp
(define-key isearch-mode-map (kbd "M-j") 'avy-isearch)

(defun isearch-forward-other-window (prefix)
    "Function to isearch-forward in other-window."
    (interactive "P")
    (unless (one-window-p)
      (save-excursion
        (let ((next (if prefix -1 1)))
          (other-window next)
          (isearch-forward)
          (other-window (- next))))))

(defun isearch-backward-other-window (prefix)
  "Function to isearch-backward in other-window."
  (interactive "P")
  (unless (one-window-p)
    (save-excursion
      (let ((next (if prefix 1 -1)))
        (other-window next)
        (isearch-backward)
        (other-window (- next))))))


(define-key global-map (kbd "C-r") 'isearch-backward)
(define-key global-map (kbd "C-M-s") 'isearch-forward-other-window)
(define-key global-map (kbd "C-M-r") 'isearch-backward-other-window)
(define-key global-map (kbd "M-s-s") 'isearch-forward-regexp)
(define-key global-map (kbd "M-s-r") 'isearch-backward-regexp)
#+end_src

*** avy

Flipping gss and gs/

#+begin_src elisp
(map!
 (:map 'override
   :nvm "M-j" #'evil-avy-goto-char-timer
   :nvm "gss" #'evil-avy-goto-char-timer
   :nvm "gs/" #'evil-avy-goto-char-2))
#+end_src

[[https://karthinks.com/software/avy-can-do-anything/][Avy can do anything | Karthinks]]

#+begin_src elisp
(use-package! avy
 :config
 (setq avy-all-windows t)
)

(defun avy-action-embark (pt)
  (unwind-protect
      (save-excursion
        (goto-char pt)
        (embark-act))
    (select-window
     (cdr (ring-ref avy-ring 0))))
  t)

(setf (alist-get ?. avy-dispatch-alist) 'avy-action-embark)
#+end_src

*** consult

#+begin_src elisp
(map!
   "M-g o" #'consult-outline)
#+end_src

#+begin_src elisp
(map!
   :leader "s f" #'consult-find
   :leader "b o" #'consult-buffer-other-window
   :leader "s y" #'consult-yank-from-kill-ring
   :leader "r l" #'consult-register-load
   :leader "r s" #'consult-register-store
   :leader "r r" #'consult-register
   [remap jump-to-register] #'consult-register-load

   ;; Isearch integration
   :map isearch-mode-map
   "M-e" #'consult-isearch-history      ;orig. isearch-edit-string
   "M-s e" #'consult-isearch-history    ;orig. isearch-edit-string
   ;; Minibuffer history
   :map minibuffer-local-map
   "M-r" #'consult-history     ;orig. previous-matching-history-element
   ;; Redundant with Doom's :config default bindings
   :map global-map
   [remap Info-search] #'consult-info
   "M-X" #'consult-mode-command)

(map! :map help-map "TAB" #'consult-info)
#+end_src

*** spell-fu

[[https://github.com/doomemacs/doomemacs/issues/6246][doomemacs/doomemacs#6246 +spell/add-word does not create a personal dictionar...]]

#+begin_src sh :tangle no
mkdir -p ~/.config/emacs/.local/etc/ispell && echo personal_ws-1.1 en 0 >> ~/.config/emacs/.local/etc/ispell/.pws
#+end_src

Turn off spell-fu by default. If you remove the hook after! spell-fu, it's too late. spell-fu-ignore-modes only works if spell-fu-global-mode is set.

#+begin_src elisp
(remove-hook 'text-mode-hook #'spell-fu-mode)
;;(setq spell-fu-ignore-modes (list 'org-mode))
#+end_src

*** orderless

#+begin_src elisp
(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src

*** erc

message type codes: https://datatracker.ietf.org/doc/html/rfc2812

  #+begin_src elisp
  (setq erc-autojoin-channels-alist '(("libera.chat" "#haskell" "#emacs")))
  (setq erc-hide-list '("JOIN" "PART" "QUIT"))
  (setq erc-hide-timestamps t)
  (setq erc-autojoin-timing 'ident)
  ;; (erc-prompt-for-nickserv-password nil)
  (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                "324" "329" "332" "333" "353" "477"))
  #+end_src

*** latex

#+begin_src elisp
(after! latex
 (setq org-latex-packages-alist '(("" "tikz-cd" t) ("" "tikz" t)))
)
#+end_src

*** flycheck

#+begin_src elisp
(after! flycheck
  (map!
    :n "M-n" 'flycheck-next-error
    :n "M-p" 'flycheck-previous-error))
#+end_src

*** eglot

#+begin_src elisp
(after! eglot
    (push  '(haskell-ng-mode . ("haskell-language-server-wrapper" "--lsp")) eglot-server-programs)
)
#+end_src
#+RESULTS:

* Org
** general tweaks

#+begin_src elisp
(after! org
  :config
  (setq
   org-log-into-drawer t
   org-startup-folded t
   org-support-shift-select t
   org-insert-heading-respect-content t
   org-startup-with-inline-images t
   org-cycle-include-plain-lists 'integrate
   ;; https://github.com/syl20bnr/spacemacs/issues/13465
   org-src-tab-acts-natively nil
   ;; from org-modern example
   org-auto-align-tags nil
   org-tags-column 0
   org-fold-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-hide-emphasis-markers t
   org-pretty-entities t
   org-ellipsis "…"
   org-agenda-tags-column 0
   org-agenda-block-separator ?─)
   (remove-hook 'org-mode-hook 'flyspell-mode)
   (setq-default org-todo-keywords '((sequence "ToDo(t)" "Next(n)" "Blocked(b)" "|" "Done(d!)")))
)
 #+end_src

** org-agenda

#+begin_src elisp
(after! org-agenda
  :config
  (setq org-agenda-span 'week
        org-agenda-use-time-grid nil
        org-agenda-start-day "-0d"
        org-agenda-block-separator nil
        org-agenda-skip-scheduled-if-done t
        org-agenda-inhibit-startup nil
        org-agenda-show-future-repeats nil
        org-agenda-compact-blocks t
        org-agenda-window-setup 'other-window
        org-agenda-show-all-dates nil
        org-agenda-prefix-format
         '((agenda . " %-24t")
           (todo . " %-24(org-name-short)")))
  (setq org-agenda-custom-commands
         '(("n" "next"
            ((agenda "" ((org-agenda-overriding-header "")))
             (todo "Next" ((org-agenda-overriding-header "Next")))))
           ("z" "z-agenda"
            ((agenda "" ((org-agenda-overriding-header "")))
             (todo "Next" ((org-agenda-overriding-header "Next")))
             (todo "Blocked" ((org-agenda-overriding-header "Blocked")))
             (todo "ToDo" ((org-agenda-overriding-header "ToDo")))))))
  (map! :leader "oz" #'agenda-z))

(defun org-name-short ()
  (interactive)
  (let
      ((xs (seq-subseq (file-name-split (buffer-file-name)) -2)))
      (concat
      (concat (nth 0 xs) "/")
      (file-name-base
      (nth 1 xs)))))

(defun agenda-z ()
  (interactive)
  (org-agenda nil "z"))
#+end_src

** org-capture

#+begin_src elisp
(after! org
  (setq
   org-capture-templates
   (quote
    (("r" "refile" entry
      (file "~/org/refile.org")
      "* ToDo %?
")
     ("z" "bugz" entry
      (file+headline "~/org/bugz.org" "bugz!")
      "* ToDo %?
%a")))))
#+end_src

** Turn company mode off

#+begin_src elisp
(after! org
  :config
  (progn
    (set-company-backend! 'org-mode nil)
    (set-company-backend! 'org-mode '(:separate company-yasnippet company-dabbrev))))
#+end_src

** babel
*** yank-into-block

#+begin_src elisp
(after! org
  :config
  (defun display-ansi-colors ()
    (interactive)
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max))))
   (add-hook 'org-babel-after-execute-hook #'display-ansi-colors)

   (map! :map org-mode-map
         :localleader
         (:prefix ("z" . "yank to block")
          :nvm "b" #'org-yank-into-new-block
          :nvm "e" #'org-yank-into-new-block-elisp
          :nvm "s" #'org-yank-into-new-block-sh
          :nvm "h" #'org-yank-into-new-block-haskell
          :nvm "n" #'org-new-block-haskell
          :nvm "z" (cmd! (org-new-block ""))
          :nvm "q" #'org-yank-into-new-quote)))

(defun org-yank-into-new-block (&optional template)
    (interactive)
    (let ((begin (point))
          done)
      (unwind-protect
          (progn
            (end-of-line)
            (yank)
            (push-mark begin)
            (setq mark-active t)
            (if template
             (org-insert-structure-template template)
             (call-interactively #'org-insert-structure-template))
            (setq done t)
            (deactivate-mark)
            (let ((case-fold-search t))
              (re-search-forward (rx bol "#+END_")))
            (forward-line 1))
        (unless done
          (deactivate-mark)
          (delete-region begin (point))))))

(defun org-new-block (&optional template)
    (interactive)
    (let ((begin (point))
          done)
      (unwind-protect
          (progn
            (end-of-line)
            (push-mark begin)
            (setq mark-active t)
            (if template
             (org-insert-structure-template template)
             (call-interactively #'org-insert-structure-template))
            (setq done t)
            (deactivate-mark)
            (evil-org-open-above 1))
        (unless done
          (deactivate-mark)
          (delete-region begin (point))))))

(defun org-yank-into-new-block-elisp ()
  (interactive)
  (org-yank-into-new-block "src elisp"))

(defun org-yank-into-new-block-sh ()
  (interactive)
  (org-yank-into-new-block "src sh :results output"))

(defun org-yank-into-new-block-haskell ()
  (interactive)
  (org-yank-into-new-block "src haskell :results output"))

(defun org-new-block-haskell ()
  (interactive)
  (org-new-block "src haskell :results output"))

(defun org-yank-into-new-quote ()
  (interactive)
  (org-yank-into-new-block "quote"))
#+end_src

** org-random-todo

[[https://github.com/unhammer/org-random-todo][GitHub - unhammer/org-random-todo: 🍃 Pop up a random TODO from your agenda ev...]]

#+begin_src elisp
(after! org
  (use-package! org-random-todo
    :defer-incrementally t
    :commands (org-random-todo-goto-new)
    :config
    (map! :map org-mode-map
        :localleader
        (:nvm "j" #'org-random-todo-goto-new))))

(after! org-agenda
  (map! :map org-agenda-mode-map
        :localleader
        (:nvm "j" #'org-random-todo-goto-new)))
#+end_src

** hugo

docs: [[https://ox-hugo.scripter.co/][ox-hugo - Org to Hugo exporter]]

~backtrace~ bug:
https://github.com/hlissner/doom-emacs/issues/5721#issuecomment-958342837

Setup is section-based. To add a post:

- add export_file_name to the properties.
#+begin_quote
:PROPERTIES:
:EXPORT_FILE_NAME: test2
:END:
#+end_quote

- add auto save at the bottom of the file:

  #+begin_quote
 * Locals

# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
#+end_quote

A ToDo in the header makes the post a draft.

#+begin_src elisp
(after! org
  :config
  (use-package backtrace)
  (setq org-hugo-base-dir "~/site"
        org-hugo-auto-set-lastmod t
        org-hugo-use-code-for-kbd t
        org-hugo-date-format "%Y-%m-%d")
    (map! :map org-mode-map
        :localleader
        (:nvm "lp" #'org-hugo-export-wim-to-md)))
#+end_src

* Non-standard packages
** beacon

[[https://github.com/Malabarba/beacon][GitHub - Malabarba/beacon: A light that follows your cursor around so you don...]]

#+begin_src elisp
(use-package! beacon
  :config (beacon-mode 1))
#+end_src

** iscroll

[[https://github.com/casouri/iscroll][GitHub - casouri/iscroll: Smooth scrolling over images in Emacs]]

#+begin_src elisp
(use-package! iscroll
  :config (iscroll-mode 1))
#+end_src

** diminish

#+begin_src elisp
(use-package! diminish
  :config
  (diminish 'haskell-ng-mode))
#+end_src

** minions

#+begin_src elisp
(use-package! minions
  :config
)
#+end_src

* old haskell (off)
** lsp tweaks
#+begin_src elisp :tangle no
;; haskell
;;
(after! haskell
  (setq
   haskell-font-lock-symbols t
   ;; company-idle-delay 0.5
   haskell-interactive-popup-errors nil
   lsp-lens-enable nil
   lsp-ui-sideline-show-code-actions nil
   lsp-enable-folding nil
   lsp-response-timeout 120
   lsp-ui-sideline-enable nil
   lsp-haskell-plugin-import-lens-code-actions-on nil
   lsp-haskell-plugin-ghcide-type-lenses-config-mode nil
   lsp-haskell-plugin-ghcide-type-lenses-global-on nil
   lsp-haskell-plugin-import-lens-code-lens-on nil
   lsp-ui-doc-enable nil
   ;; lsp-enable-symbol-highlighting nil
   +lsp-prompt-to-install-server 'quiet
   lsp-modeline-diagnostics-scope :project
   ;; lsp-modeline-code-actions-segments '(count icon)
   flycheck-check-syntax-automatically '(save)
   lsp-haskell-brittany-on nil
   lsp-haskell-floskell-on nil
   lsp-haskell-fourmolu-on nil
   lsp-haskell-stylish-haskell-on nil
   lsp-haskell-retrie-on nil
   ;; lsp-completion-provider :none
   haskell-process-show-debug-tips nil
   haskell-process-suggest-remove-import-lines nil
   haskell-process-suggest-restart nil
   ;;haskell-process-type 'stack-ghci
   haskell-process-type 'cabal-repl
   )

  (haskell-indentation-mode -1)
  (setq-local tab-stop-list '(2 4))
  (setq-local indent-line-function 'indent-relative)
  (setq-local tab-width 2)
  (setq-local evil-shift-width 2)
  (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
  (global-so-long-mode -1)
  (add-hook! 'haskell-mode-hook 'interactive-haskell-mode)
  (add-hook! 'haskell-mode-hook #'tree-sitter-hl-mode)
  )
#+end_src

*** insert symbol (off)

#+begin_src elisp :tangle no
(after! haskell
  (defun mk-haskell-insert-symbol ()
    "Insert one of the Haskell symbols that are difficult to type."
    (interactive)
    (char-menu
     '("<-" "::"  "->"  "=>"  "="
       "<*" "<$>" "<*>" "<|>" "*>")))
    (map! :localleader
        :map haskell-mode-map
        (:nvm "m" #'mk-haskell-insert-symbol)
    ))
#+end_src

*** flycheck keys (off)

#+begin_src elisp :tangle no
(after! haskell
  (map! :localleader
        :map haskell-mode-map
        "n" #'flycheck-next-error
        "p" #'flycheck-previous-error))
#+end_src

*** company (off)

#+begin_src elisp :tangle no
(map!
  :after company
  :map company-active-map
  "RET" nil
  "<return>" nil
  "<tab>" #'company-complete-selection
  "TAB" #'company-complete-selection)
(setq tab-always-indent 'complete)
#+end_src

*** pairs (off)
#+begin_src elisp :tangle no
(after! haskell
      (sp-with-modes '(haskell-mode haskell-interactive-mode)
        (sp-local-pair "{-" "-}" :actions :rem)
        (sp-local-pair "{-#" "#-}" :actions :rem)
        (sp-local-pair "{-@" "@-}" :actions :rem)
        (sp-local-pair "{-" "-")
        (sp-local-pair "{-#" "#-")
        (sp-local-pair "{-@" "@-")))
#+end_src

*** interactive return (off)
#+begin_src elisp :tangle no
(after! haskell
  (map! (:map haskell-interactive-mode-map
        :n "<RET>" #'haskell-interactive-mode-return)))
#+end_src

** haskell-lite (off)
*** keys (off)

#+begin_src elisp :tangle no
(after! haskell
  (use-package! haskell-lite
    :config
    (map! :localleader
        :map haskell-mode-map
        (:prefix ("l" . "lite")
         :nvm "s" #'haskell-lite-repl-start
         :nvm "q" #'haskell-lite-repl-quit
         :nvm "b" #'haskell-lite-repl-buffer
         :nvm "l" #'haskell-lite-repl-load-file
         :nvm "o" #'haskell-lite-repl-overlay
         :nvm "c" #'haskell-comint-clear-buffer
         :nvm "k" #'haskell-comint-restart)
    )))
#+end_src

*** org & haskell-lite (off)

org-mode is often involved before haskell-mode is used.

#+begin_src elisp :tangle no
(after! org
  (use-package! haskell-lite
    :config
    (setq comint-prompt-regexp "ghci> ")
    (map! :localleader
        :map org-mode-map
        (:prefix ("y" . "haskell-lite")
         :nvm "s" #'haskell-lite-repl-start
         :nvm "q" #'haskell-lite-repl-quit
         :nvm "b" #'haskell-lite-repl-buffer
         :nvm "l" #'haskell-lite-repl-load-file
         :nvm "o" #'haskell-lite-repl-overlay
         :nvm "c" #'haskell-lite-clear-buffer
         :nvm "k" #'haskell-lite-repl-restart)
    )))
#+end_src

*** fd-haskell (off)

#+begin_src elisp :tangle no
(after! haskell
  (use-package! fd-haskell
    :config
     (setq haskell-shell-buffer-name "haskell")
     (setq haskell-shell-interpreter '("cabal" "repl"))
     (setq haskell-shell-interpreter-args '())
     (setq haskell-pdbtrack-activate nil)
    )
  (add-hook! 'haskell-mode-hook 'fd-haskell-mode))
#+end_src

*** company-ghci (off)

#+begin_src elisp :tangle no
(use-package company-ghci
  :after pos-tip
  :config
  (defun show-hoogle-info-in-popup ()
    (pos-tip-show (company-ghci/hoogle-info (symbol-at-point))))
  (defun company-ghci-setup ()
    (push 'company-ghci company-backends)
    (define-key evil-normal-state-map (kbd "C-;") (lambda () (interactive) (show-hoogle-info-in-popup))))
  (add-hook 'haskell-interactive-mode-hook 'company-mode)
  (add-hook 'haskell-mode-hook 'company-ghci-setup))
#+end_src

** ormolu (off)
#+begin_src elisp :tangle no
(use-package ormolu
  :bind (:map haskell-mode-map
              ("C-c r" . ormolu-format-buffer)))
#+end_src

** repl quit (off)
#+begin_src elisp :tangle no
(after! haskell
  (defun haskell-repl-quit (&optional process)
    "Kill a repl."
    (interactive)
    (when (buffer-live-p inferior-haskell-buffer)
      (with-current-buffer inferior-haskell-buffer
        (comint-kill-subjob)
        (kill-buffer))))

  (setq kill-buffer-query-functions
        (delq 'process-kill-buffer-query-function kill-buffer-query-functions))

  (map! :leader "zhk" #'haskell-repl-quit)
)
#+end_src

** eglot experiment (off)

#+begin_src elisp :tangle no
(after! haskell
  (use-package eglot)
  (add-hook! 'haskell-mode-hook 'eglot-ensure)
  (add-to-list 'eglot-server-programs
             '(haskell-mode . ("haskell-language-server-wrapper" "--lsp"))))
#+end_src

** Tidal (off)

~cabal install tidal --lib~ (used to be) the magical incantation.

SuperCompiler start.scd

#+begin_example
Server.local.options.sampleRate = 44100;
SuperDirt.start;
s.reboot
#+end_example

#+begin_src elisp :tangle no
(use-package! tidal
    :init
    (progn
      ;; (setq tidal-interpreter "ghci")
      ;; (setq tidal-interpreter-arguments (list "ghci" "-XOverloadedStrings" "-package" "tidal"))
      ;; (setq tidal-boot-script-path "~/.emacs.doom/.local/straight/repos/Tidal/BootTidal.hs")
      ))
#+end_src

** haskell-snippets (off)

#+begin_src elisp :tangle no
(use-package! haskell-snippets
  :after (haskell-mode yasnippet))
#+end_src

* haskell-ng

[[https://gitlab.com/magus/mes][Magnus Therning / My Emacs Setup · GitLab]]

** treesit installation (run first-time only)

I performed these steps manually, and this is indicative only:

  #+begin_src elisp :tangle no
  (add-to-list 'treesit-language-source-alist '(haskell "https://github.com/tree-sitter/tree-sitter-haskell"))
  (add-to-list 'treesit-language-source-alist '(cabal ("https://gitlab.com/magus/tree-sitter-cabal.git" "main" "src" "gcc-13" "c++-13")))
  (treesit-install-language-grammar 'haskell)
  (treesit-install-language-grammar 'cabal)
  #+end_src

** haskell-ng-mode

#+begin_src elisp
(after! treesit
(use-package! haskell-ng-mode
  :diminish
  :load-path "~/.config/doom/repos/haskell-ng-mode"
  :init
  (add-to-list 'treesit-language-source-alist '(haskell "https://github.com/tree-sitter/tree-sitter-haskell"))
  ; (add-to-list 'treesit-language-source-alist '(cabal ("https://gitlab.com/magus/tree-sitter-cabal.git" "main" "src" "gcc-13" "c++-13")))
  (add-to-list 'treesit-language-source-alist '(cabal ("https://gitlab.com/magus/tree-sitter-cabal.git")))
  (add-to-list 'major-mode-remap-alist '(haskell-mode . haskell-ng-mode))
  (add-to-list 'major-mode-remap-alist '(cabal-mode . cabal-ng-mode))
  (defalias 'haskell-mode #'haskell-ng-mode)
  (defalias 'cabal-mode #'cabal-ng-mode)
  :hook
  (haskell-ng-mode . lsp-deferred)
  (haskell-ng-mode . (lambda () (setq-local tab-width 2)))
  :config
  (use-package! ormolu)
  (map! :localleader
        :map haskell-ng-mode-map
        :nvm "'" #'haskell-ng-repl-run
        (:prefix ("=" . "format")
         :nvm "=" #'ormolu-format-buffer)
        (:prefix ("g" . "goto")
         :nvm "p" #'pop-tag-mark
         :nvm "d" #'evil-goto-definition
         :nvm "h" #'lsp-describe-thing-at-point
         :nvm "r" #'xref-find-definitions
         :nvm "t" #'lsp-find-type-definition
         :nvm "T" #'lsp-goto-type-definition)
        (:prefix ("t" . "toggle")
         :nvm "l" #'lsp-lens-mode)
        (:prefix ("," . "backend")
         :nvm "e" #'eglot
         :nvm "l" #'lsp
         :nvm "r" #'lsp-workspace-restart
         :nvm "q" #'lsp-workspace-shutdown))
  (map! :localleader
        :map cabal-ng-mode-map
        (:prefix ("=" . "format")
         :nvm "=" #'cabal-format-buffer
         :nvm "r" #'cabal-format-region))))
#+end_src

*** require

FIXME: Not sure why this is required

#+begin_src elisp
(require 'haskell-ng-mode)
#+end_src

#+RESULTS:
: haskell-ng-mode

** ob-haskell-ng

#+begin_src elisp
(use-package! ob-haskell-ng
  :load-path "~/.config/doom/repos/ob-haskell-ng"
  :config
  (setq org-babel-default-header-args '((:results . "replace output") (:exports . "both")))
)
#+end_src

** combobulate

[[https://github.com/mickeynp/combobulate][GitHub - mickeynp/combobulate: Structured Editing and Navigation in Emacs]]

 #+begin_src elisp
 (use-package! combobulate)
 #+end_src

** lsp-haskell

#+begin_src elisp
(after! lsp
(use-package! lsp-haskell
  :config
  (setq
        lsp-haskell-brittany-on nil
        lsp-haskell-floskell-on nil
        lsp-haskell-fourmolu-on nil
        lsp-haskell-stylish-haskell-on nil
        lsp-haskell-retrie-on nil
        lsp-haskell-plugin-import-lens-code-actions-on nil
        lsp-haskell-plugin-ghcide-type-lenses-config-mode nil
        lsp-haskell-plugin-ghcide-type-lenses-global-on nil
        lsp-haskell-plugin-import-lens-code-lens-on nil)))
#+end_src

** global treesit functionality

#+begin_src elisp

(after! treesit
(defun ts-inspect ()
  (interactive)
  (when-let* ((nap (treesit-node-at (point))))
    (message "%S - %S" nap (treesit-node-type nap))))

(defun ts-query-root (query)
  (interactive "sQuery: ")
  (let ((ss0 (treesit-query-capture (treesit-buffer-root-node) query)))
    (message "%S" ss0))))

#+end_src


* Tidal

#+begin_src elisp :tangle no
(use-package! tidal
    :init
    (progn
      ;; (setq tidal-interpreter "ghci")
      ;; (setq tidal-interpreter-arguments (list "ghci" "-XOverloadedStrings" "-package" "tidal"))
      (setq tidal-boot-script-path "~/.config/emacs/.local/straight/repos/Tidal/BootTidal.hs")
      ))
#+end_src
